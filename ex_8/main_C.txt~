#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <native/task.h>
#include <native/sem.h>
#include <native/mutex.h>
#include <native/timer.h>
#include <sys/mman.h>
#include <pthread.h>
#include <sched.h>
#include <rtdk.h>

#define CORE_NUM 1


RT_MUTEX mutex;
RT_SEM sync_sem;

void busy_wait_us(unsigned long delay){
	for(; delay > 0; delay--){
		rt_timer_spin(1000);
	}
}


//functions to be executed by tasks

void low_func(void *arg){
	unsigned long duration = 30000000000;
	unsigned long endTime = rt_timer_read() + duration;
	
	rt_printf("Task %s waiting for sync\n", arg);	
	rt_sem_p(&sync_sem, TM_INFINITE);	
	rt_printf("Task %s got sync\n", arg);

	rt_printf("Task %s Waiting for mutex\n", arg);
	rt_mutex_acquire(&mutex, TM_INFINITE);
	rt_printf("Task %s got mutex\n", arg);
	
	// Busy wait
	rt_printf("Task %s busy wait\n", arg);	
	busy_wait_us(3000);

	rt_mutex_release(&mutex);
	rt_printf("Task %s release mutex\n", arg);
	rt_printf("Task %s done\n", arg);

	if (rt_timer_read() > endTime){
		rt_printf("Time expired\n");
		rt_task_delete(NULL);		
	}
	if (rt_task_yield()){
		rt_printf("No yield\n");
		rt_task_delete(NULL);
	}

	return;
}

void med_func(void *arg){
	unsigned long duration = 30000000000;
	unsigned long endTime = rt_timer_read() + duration;
	
	rt_printf("Task %s waiting for sync\n", arg);	
	rt_sem_p(&sync_sem, TM_INFINITE);	
	rt_printf("Task %s got sync\n", arg);

	
	rt_printf("Task %s sleep\n", arg);
	rt_task_sleep(1*10e6);

	rt_printf("Task %s busy wait\n", arg);
	busy_wait_us(5000);

	rt_printf("Task %s done\n", arg);

	if (rt_timer_read() > endTime){
		rt_printf("Time expired\n");
		rt_task_delete(NULL);		
	}
	if (rt_task_yield()){
		rt_printf("No yield\n");
		rt_task_delete(NULL);
	}

	return;
}

void high_func(void *arg){
	unsigned long duration = 30000000000;
	unsigned long endTime = rt_timer_read() + duration;

	rt_printf("Task %s waiting for sync\n", arg);	
	rt_sem_p(&sync_sem, TM_INFINITE);	
	rt_printf("Task %s got sync\n", arg);

	rt_printf("Task %s sleep\n", arg);
	rt_task_sleep(2*10e6);

	rt_printf("Task %s Waiting for muetx\n", arg);
	rt_mutex_acquire(&mutex, TM_INFINITE);
	rt_printf("Task %s got mutex\n", arg);

	// Busy wait
	rt_printf("Task %s busy wait\n", arg);	
	busy_wait_us(2000);

	rt_mutex_release(&mutex);
	rt_printf("Task %s release mutex\n", arg);

	rt_printf("Task %s done\n", arg);	

	if (rt_timer_read() > endTime){
		rt_printf("Time expired\n");
		rt_task_delete(NULL);		
	}
	if (rt_task_yield()){
		rt_printf("No yield\n");
		rt_task_delete(NULL);
	}

	return;
}


int main(int argc, char* argv[]){
	mlockall(MCL_CURRENT|MCL_FUTURE);

	rt_print_auto_init(1);
	
	rt_task_shadow(NULL, "MainTask", 20, T_CPU(CORE_NUM+1));
	
	rt_sem_create(&sync_sem, NULL, 0, S_PRIO);

	// Create mutex
	rt_mutex_create(&mutex, "coolMutex");
	
	// Create tasks
	RT_TASK task_L;
	RT_TASK task_M;
	RT_TASK task_H;		
	rt_task_create(&task_L, NULL, 0, 50, T_CPU(CORE_NUM));
	rt_task_create(&task_M, NULL, 0, 60, T_CPU(CORE_NUM));
	rt_task_create(&task_H, NULL, 0, 70, T_CPU(CORE_NUM));
	
	// Start tasks
	rt_task_start(&task_L, low_func, (void*)("Low"));
	rt_task_start(&task_M, med_func, (void*)("Med"));
	rt_task_start(&task_H, high_func, (void*)("High"));


	RTIME sleep_time = 100*1000*1000;
	rt_timer_spin(sleep_time);
	
	// Broadcast Semaphore
	rt_sem_broadcast(&sync_sem);

	while(1){}	

	// Delete Mutex
	rt_mutex_delete(&mutex);
	

	return 0;
}




/* ASCII ART TASK C

Med start
	Low start
		Low Done
			Med Done
				High start
					High Done

*/













